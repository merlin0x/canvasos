// src/renderer/index.js
// –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è Canvas OS

import React from 'react';
import ReactDOM from 'react-dom/client';
import { Subject, BehaviorSubject } from 'rxjs';
import { GraphManager } from '@core/Graph.js';
import { ProcessNode } from '@nodes/ProcessNode.js';
import { Canvas } from '@components/Canvas.jsx';

// –Ü–º–ø–æ—Ä—Ç —Å—Ç–∏–ª—ñ–≤
import '@styles/main.css';
import '@styles/nodes.css';
import '@styles/components.css';

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä–∞—Ñ–∞
const graphManager = new GraphManager();

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É
const appState = {
  theme: 'dark',
  language: 'uk',
  showGrid: true,
  snapToGrid: false,
  autoSave: true,
  debugMode: false
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
function initializeApp() {
  console.log('üöÄ Canvas OS starting...');
  
  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
  setupGlobalHandlers();
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  loadSettings();
  
  // –ü—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è –µ–∫—Ä–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const loadingScreen = document.querySelector('.loading-screen');
  if (loadingScreen) {
    setTimeout(() => {
      loadingScreen.classList.add('fade-out');
      setTimeout(() => {
        loadingScreen.style.display = 'none';
      }, 500);
    }, 300);
  }
  
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const root = ReactDOM.createRoot(document.getElementById('root'));
  
  // –†–µ–Ω–¥–µ—Ä –¥–æ–¥–∞—Ç–∫—É
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  );
  
  // –ü–æ–∫–∞–∑ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  showWelcomeMessage();
}

// –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–¥–∞—Ç–∫—É
function App() {
  const [settings, setSettings] = React.useState(appState);
  const [isLoading, setIsLoading] = React.useState(false);
  const [currentFile, setCurrentFile] = React.useState(null);
  
  // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –≤—ñ–¥ Electron
  React.useEffect(() => {
    if (!window.canvasAPI) return;
    
    // –ù–æ–≤–∏–π —Ñ–∞–π–ª
    window.canvasAPI.on('menu-new', () => {
      if (confirm('–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –≥—Ä–∞—Ñ? –ù–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏ –±—É–¥–µ –≤—Ç—Ä–∞—á–µ–Ω–æ.')) {
        graphManager.clear();
        setCurrentFile(null);
        showNotification('info', '–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –≥—Ä–∞—Ñ');
      }
    });
    
    // –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª
    window.canvasAPI.on('menu-open', async () => {
      const result = await window.canvasAPI.dialog.open();
      if (!result.canceled && result.filePaths[0]) {
        setIsLoading(true);
        try {
          const fileResult = await window.canvasAPI.file.read(result.filePaths[0]);
          if (fileResult.success) {
            const parsed = JSON.parse(fileResult.data);
            graphManager.fromJSON(parsed);
            setCurrentFile(result.filePaths[0]);
            showNotification('success', '–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
          }
        } catch (error) {
          showNotification('error', '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É');
          console.error(error);
        }
        setIsLoading(false);
      }
    });
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏
    window.canvasAPI.on('menu-save', async () => {
      if (currentFile) {
        saveToFile(currentFile);
      } else {
        saveAsNewFile();
      }
    });
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫
    window.canvasAPI.on('menu-save-as', saveAsNewFile);
    
    // –°–∫–∞—Å—É–≤–∞—Ç–∏/–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏
    window.canvasAPI.on('menu-undo', () => graphManager.undo());
    window.canvasAPI.on('menu-redo', () => graphManager.redo());
    
    // –ï–∫—Å–ø–æ—Ä—Ç
    window.canvasAPI.on('menu-export', (format) => {
      exportGraph(format);
    });
    
    return () => {
      // –í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ –ø–æ–¥—ñ–π –ø—Ä–∏ –¥–µ–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
      if (window.canvasAPI) {
        window.canvasAPI.removeAllListeners('menu-new');
        window.canvasAPI.removeAllListeners('menu-open');
        window.canvasAPI.removeAllListeners('menu-save');
        window.canvasAPI.removeAllListeners('menu-save-as');
        window.canvasAPI.removeAllListeners('menu-undo');
        window.canvasAPI.removeAllListeners('menu-redo');
        window.canvasAPI.removeAllListeners('menu-export');
      }
    };
  }, [currentFile]);
  
  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω
  React.useEffect(() => {
    const subscription = graphManager.changes$.subscribe(() => {
      if (window.canvasAPI) {
        window.canvasAPI.setUnsavedChanges(graphManager.state.isDirty);
      }
    });
    
    return () => subscription.unsubscribe();
  }, []);
  
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
  async function saveToFile(filePath) {
    setIsLoading(true);
    try {
      const data = JSON.stringify(graphManager.toJSON(), null, 2);
      const result = await window.canvasAPI.file.save(filePath, data);
      if (result.success) {
        graphManager.state.isDirty = false;
        showNotification('success', '–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
      } else {
        showNotification('error', '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
      }
    } catch (error) {
      showNotification('error', '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ' + error.message);
    }
    setIsLoading(false);
  }
  
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —è–∫ –Ω–æ–≤–∏–π —Ñ–∞–π–ª
  async function saveAsNewFile() {
    const result = await window.canvasAPI.dialog.save();
    if (!result.canceled && result.filePath) {
      setCurrentFile(result.filePath);
      saveToFile(result.filePath);
    }
  }
  
  return (
    <div className="app-container" data-theme={settings.theme}>
      <Canvas 
        graphManager={graphManager}
        settings={settings}
        onSettingsChange={updateSettings}
      />
      
      {isLoading && <LoadingOverlay />}
    </div>
  );
  
  function updateSettings(newSettings) {
    setSettings(newSettings);
    saveSettings(newSettings);
  }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function LoadingOverlay() {
  return (
    <div className="loading-overlay">
      <div className="loading-spinner">
        <div className="spinner"></div>
        <div className="loading-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
      </div>
    </div>
  );
}

// === –ì–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ ===

function setupGlobalHandlers() {
  // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
  window.addEventListener('error', (event) => {
    console.error('Global error:', event.error);
    showNotification('error', '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: ' + event.error.message);
  });
  
  window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled promise rejection:', event.reason);
    showNotification('error', '–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ' + event.reason);
  });
  
  // –ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞, –≤ Electron –≤–æ–Ω–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–µ–Ω—é)
  if (!window.canvasAPI) {
    document.addEventListener('keydown', handleGlobalKeydown);
  }
}

// –û–±—Ä–æ–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –≥–∞—Ä—è—á–∏—Ö –∫–ª–∞–≤—ñ—à (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)
function handleGlobalKeydown(e) {
  // Ctrl/Cmd + S - –∑–±–µ—Ä–µ–≥—Ç–∏
  if ((e.ctrlKey || e.metaKey) && e.key === 's') {
    e.preventDefault();
    saveGraphBrowser();
  }
  
  // Ctrl/Cmd + O - –≤—ñ–¥–∫—Ä–∏—Ç–∏
  if ((e.ctrlKey || e.metaKey) && e.key === 'o') {
    e.preventDefault();
    loadGraphBrowser();
  }
  
  // Ctrl/Cmd + Z - —Å–∫–∞—Å—É–≤–∞—Ç–∏
  if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {
    e.preventDefault();
    graphManager.undo();
  }
  
  // Ctrl/Cmd + Shift + Z - –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏
  if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'z') {
    e.preventDefault();
    graphManager.redo();
  }
}

// === –û–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ ===

function saveGraphBrowser() {
  const data = JSON.stringify(graphManager.toJSON(), null, 2);
  const blob = new Blob([data], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `canvas-os-graph-${Date.now()}.json`;
  a.click();
  URL.revokeObjectURL(url);
  
  showNotification('success', '–ì—Ä–∞—Ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —è–∫ —Ñ–∞–π–ª');
}

function loadGraphBrowser() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = '.json';
  
  input.onchange = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    try {
      const text = await file.text();
      const parsed = JSON.parse(text);
      graphManager.fromJSON(parsed);
      showNotification('success', '–ì—Ä–∞—Ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
      showNotification('error', '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É');
      console.error(error);
    }
  };
  
  input.click();
}

// –ï–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞
async function exportGraph(format) {
  switch (format) {
    case 'json':
      saveGraphBrowser();
      break;
    case 'png':
    case 'svg':
      showNotification('info', `–ï–∫—Å–ø–æ—Ä—Ç –≤ ${format.toUpperCase()} –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º`);
      break;
  }
}

// === –£—Ç–∏–ª—ñ—Ç–∏ ===

function showNotification(type, message) {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const notification = document.createElement('div');
  notification.className = `notification notification-${type} show`;
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : type === 'warning' ? '#FF9800' : '#2196F3'};
    color: white;
    padding: 12px 20px;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    z-index: 2000;
    max-width: 300px;
    animation: slideIn 0.3s ease-out;
  `;
  
  // –î–æ–¥–∞—î–º–æ –¥–æ body
  document.body.appendChild(notification);
  
  // –í–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
  setTimeout(() => {
    notification.style.animation = 'slideOut 0.3s ease-in';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

function showWelcomeMessage() {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        üéØ Canvas OS MVP v1.0.0        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  –ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –∫–∞–Ω–≤–∞ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ   ‚ïë
‚ïë  –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Ç–∞ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

${window.canvasAPI ? 'Electron –≤–µ—Ä—Å—ñ—è' : '–ë—Ä–∞—É–∑–µ—Ä –≤–µ—Ä—Å—ñ—è'}

–ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ:
‚Ä¢ ${window.canvasAPI ? 'Cmd/Ctrl' : 'Ctrl'} + S - –ó–±–µ—Ä–µ–≥—Ç–∏
‚Ä¢ ${window.canvasAPI ? 'Cmd/Ctrl' : 'Ctrl'} + O - –í—ñ–¥–∫—Ä–∏—Ç–∏
‚Ä¢ ${window.canvasAPI ? 'Cmd/Ctrl' : 'Ctrl'} + Z - –°–∫–∞—Å—É–≤–∞—Ç–∏
‚Ä¢ ${window.canvasAPI ? 'Cmd/Ctrl' : 'Ctrl'} + Shift + Z - –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏
‚Ä¢ Delete - –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω–µ

–ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ –Ω–∞ –∫–∞–Ω–≤—ñ - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤—É–∑–æ–ª
–ü–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑ –ø–æ—Ä—Ç—É –Ω–∞ –ø–æ—Ä—Ç - –∑'—î–¥–Ω–∞—Ç–∏
  `);
}

function loadSettings() {
  try {
    const saved = localStorage.getItem('canvasOS-settings');
    if (saved) {
      Object.assign(appState, JSON.parse(saved));
    }
  } catch (error) {
    console.error('Failed to load settings:', error);
  }
}

function saveSettings(settings) {
  try {
    localStorage.setItem('canvasOS-settings', JSON.stringify(settings));
  } catch (error) {
    console.error('Failed to save settings:', error);
  }
}

// === –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É ===

window.CanvasOS = {
  graphManager,
  appState,
  showNotification,
  ProcessNode, // –î–ª—è –¥–æ—Å—Ç—É–ø—É –∑ –∫–æ–Ω—Å–æ–ª—ñ
  version: '1.0.0'
};

// –ê–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes slideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
`;
document.head.appendChild(style);

// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
initializeApp();