// src/renderer/components/Toolbar.js
// –ü–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ Canvas OS

import React, { useState } from 'react';
import { NodeType } from '../core/constants.js';

export function Toolbar({ 
  onCommand, 
  currentTool, 
  isSimulating, 
  canUndo, 
  canRedo 
}) {
  const [showNodeMenu, setShowNodeMenu] = useState(false);
  
  const nodeTypes = [
    { type: NodeType.INPUT, label: 'Input', icon: 'üì•' },
    { type: NodeType.PROCESS, label: 'Process', icon: '‚öôÔ∏è' },
    { type: NodeType.FILTER, label: 'Filter', icon: 'üîΩ' },
    { type: NodeType.OUTPUT, label: 'Output', icon: 'üì§' },
    { type: NodeType.VISUALIZER, label: 'Visualizer', icon: 'üìä' },
    { type: NodeType.AUTOMATON, label: 'Automaton', icon: 'üéÆ' }
  ];
  
  const tools = [
    { id: 'select', icon: 'üëÜ', title: 'Select' },
    { id: 'pan', icon: '‚úã', title: 'Pan' },
    { id: 'connect', icon: 'üîó', title: 'Connect' }
  ];
  
  return (
    <div className="toolbar">
      {/* –û—Å–Ω–æ–≤–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ */}
      <div className="toolbar-group">
        {tools.map(tool => (
          <button
            key={tool.id}
            className={`toolbar-button ${currentTool === tool.id ? 'active' : ''}`}
            onClick={() => onCommand('tool', { tool: tool.id })}
            title={tool.title}
          >
            <span className="tool-icon">{tool.icon}</span>
          </button>
        ))}
      </div>
      
      <div className="toolbar-divider" />
      
      {/* –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—É–∑–ª—ñ–≤ */}
      <div className="toolbar-group">
        <div className="dropdown">
          <button 
            className="toolbar-button"
            onClick={() => setShowNodeMenu(!showNodeMenu)}
          >
            <span>‚ûï –î–æ–¥–∞—Ç–∏ –≤—É–∑–æ–ª</span>
          </button>
          
          {showNodeMenu && (
            <div className="dropdown-menu">
              {nodeTypes.map(node => (
                <button
                  key={node.type}
                  className="dropdown-item"
                  onClick={() => {
                    onCommand('add-node', { type: node.type });
                    setShowNodeMenu(false);
                  }}
                >
                  <span className="node-icon">{node.icon}</span>
                  <span>{node.label}</span>
                </button>
              ))}
            </div>
          )}
        </div>
      </div>
      
      <div className="toolbar-divider" />
      
      {/* –î—ñ—ó –∑ –≥—Ä–∞—Ñ–æ–º */}
      <div className="toolbar-group">
        <button
          className="toolbar-button"
          onClick={() => onCommand('undo')}
          disabled={!canUndo}
          title="–°–∫–∞—Å—É–≤–∞—Ç–∏ (Ctrl+Z)"
        >
          ‚Ü∂
        </button>
        <button
          className="toolbar-button"
          onClick={() => onCommand('redo')}
          disabled={!canRedo}
          title="–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ (Ctrl+Shift+Z)"
        >
          ‚Ü∑
        </button>
      </div>
      
      <div className="toolbar-divider" />
      
      {/* –°–∏–º—É–ª—è—Ü—ñ—è */}
      <div className="toolbar-group">
        <button
          className={`toolbar-button ${isSimulating ? 'active' : ''}`}
          onClick={() => onCommand('toggle-simulation')}
          title={isSimulating ? '–ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é' : '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é'}
        >
          <span>{isSimulating ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}</span>
          <span>{isSimulating ? '–ü–∞—É–∑–∞' : '–ó–∞–ø—É—Å–∫'}</span>
        </button>
      </div>
      
      <div className="toolbar-divider" />
      
      {/* –í–∏–¥ */}
      <div className="toolbar-group">
        <button
          className="toolbar-button"
          onClick={() => onCommand('center-view')}
          title="–¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –≤–∏–¥"
        >
          ‚äô
        </button>
        <button
          className="toolbar-button"
          onClick={() => onCommand('fit-to-screen')}
          title="–ü—ñ–¥—ñ–≥–Ω–∞—Ç–∏ –ø—ñ–¥ –µ–∫—Ä–∞–Ω"
        >
          ‚õ∂
        </button>
      </div>
      
      <div className="toolbar-spacer" />
      
      {/* –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó */}
      <div className="toolbar-group">
        <button
          className="toolbar-button"
          onClick={() => onCommand('delete-selected')}
          title="–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω–µ (Delete)"
        >
          üóëÔ∏è
        </button>
        <button
          className="toolbar-button danger"
          onClick={() => onCommand('clear-all')}
          title="–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ"
        >
          üßπ
        </button>
      </div>
    </div>
  );
}