// src/renderer/components/InfoPanel.js
// –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å Canvas OS

import React, { useState, useEffect } from 'react';
import { Hotkeys } from '@core/constants.js';

export function InfoPanel({ onClose, graphManager }) {
  const [activeTab, setActiveTab] = useState('help');
  const [diagnostics, setDiagnostics] = useState(null);
  
  useEffect(() => {
    if (activeTab === 'diagnostics') {
      const interval = setInterval(() => {
        setDiagnostics(graphManager.getDiagnostics());
      }, 1000);
      
      return () => clearInterval(interval);
    }
  }, [activeTab, graphManager]);
  
  const tabs = [
    { id: 'help', label: '–î–æ–ø–æ–º–æ–≥–∞', icon: '‚ùì' },
    { id: 'shortcuts', label: '–ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ', icon: '‚å®Ô∏è' },
    { id: 'examples', label: '–ü—Ä–∏–∫–ª–∞–¥–∏', icon: 'üìö' },
    { id: 'diagnostics', label: '–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', icon: 'üîß' }
  ];
  
  return (
    <div className="panel info-panel">
      <div className="panel-header">
        <div className="panel-tabs">
          {tabs.map(tab => (
            <button
              key={tab.id}
              className={`panel-tab ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              <span className="tab-icon">{tab.icon}</span>
              <span>{tab.label}</span>
            </button>
          ))}
        </div>
        <button className="panel-close" onClick={onClose}>‚úï</button>
      </div>
      
      <div className="panel-content">
        {activeTab === 'help' && <HelpContent />}
        {activeTab === 'shortcuts' && <ShortcutsContent />}
        {activeTab === 'examples' && <ExamplesContent onExample={(type) => {
          // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥
          createExample(graphManager, type);
          onClose();
        }} />}
        {activeTab === 'diagnostics' && <DiagnosticsContent diagnostics={diagnostics} />}
      </div>
    </div>
  );
}

function HelpContent() {
  return (
    <div className="help-content">
      <h3>üéØ Canvas OS - –í—ñ–∑—É–∞–ª—å–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è</h3>
      
      <section>
        <h4>–û—Å–Ω–æ–≤–∏ —Ä–æ–±–æ—Ç–∏</h4>
        <ul>
          <li><strong>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—É–∑–ª—ñ–≤:</strong> –ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ –Ω–∞ –∫–∞–Ω–≤—ñ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤</li>
          <li><strong>–ó'—î–¥–Ω–∞–Ω–Ω—è:</strong> –ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π –ø–æ—Ä—Ç —ñ –ø–æ—Ç—ñ–º –Ω–∞ –≤—Ö—ñ–¥–Ω–∏–π</li>
          <li><strong>–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è:</strong> –ü–µ—Ä–µ—Ç—è–≥—É–π—Ç–µ –≤—É–∑–ª–∏ –º–∏—à–∫–æ—é</li>
          <li><strong>–í–∏–¥–∞–ª–µ–Ω–Ω—è:</strong> –í–∏–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Delete</li>
          <li><strong>–ü–∞–Ω–æ—Ä–∞–º—É–≤–∞–Ω–Ω—è:</strong> –£—Ç—Ä–∏–º—É–π—Ç–µ —Å–µ—Ä–µ–¥–Ω—é –∫–Ω–æ–ø–∫—É –º–∏—à—ñ –∞–±–æ Alt+–õ–ö–ú</li>
          <li><strong>–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è:</strong> –ö–æ–ª–µ—Å–æ –º–∏—à—ñ</li>
        </ul>
      </section>
      
      <section>
        <h4>–¢–∏–ø–∏ –≤—É–∑–ª—ñ–≤</h4>
        <ul>
          <li><strong>Input:</strong> –ì–µ–Ω–µ—Ä—É—î –¥–∞–Ω—ñ (—Ç–∞–π–º–µ—Ä, –≤–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞, –º–∏—à–∞)</li>
          <li><strong>Process:</strong> –û–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–º –∫–æ–¥–æ–º</li>
          <li><strong>Filter:</strong> –§—ñ–ª—å—Ç—Ä—É—î –¥–∞–Ω—ñ –∑–∞ —É–º–æ–≤–æ—é</li>
          <li><strong>Output:</strong> –í–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç</li>
          <li><strong>Visualizer:</strong> –í—ñ–∑—É–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –≥—Ä–∞—Ñ—ñ—á–Ω–æ</li>
          <li><strong>Automaton:</strong> –ö–ª—ñ—Ç–∏–Ω–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç</li>
        </ul>
      </section>
      
      <section>
        <h4>–ü–æ—Ä–∞–¥–∏</h4>
        <ul>
          <li>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Ctrl/Cmd –¥–ª—è –º–Ω–æ–∂–∏–Ω–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É</li>
          <li>–ì—Ä—É–ø—É–π—Ç–µ –ø–æ–≤'—è–∑–∞–Ω—ñ –≤—É–∑–ª–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó</li>
          <li>–ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ —Ä–æ–±–æ—Ç—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ (Ctrl/Cmd+S)</li>
          <li>–ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π—Ç–µ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó</li>
        </ul>
      </section>
    </div>
  );
}

function ShortcutsContent() {
  const shortcuts = [
    { keys: 'Ctrl/Cmd + S', action: '–ó–±–µ—Ä–µ–≥—Ç–∏ –≥—Ä–∞—Ñ' },
    { keys: 'Ctrl/Cmd + O', action: '–í—ñ–¥–∫—Ä–∏—Ç–∏ –≥—Ä–∞—Ñ' },
    { keys: 'Ctrl/Cmd + Z', action: '–°–∫–∞—Å—É–≤–∞—Ç–∏' },
    { keys: 'Ctrl/Cmd + Shift + Z', action: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏' },
    { keys: 'Delete/Backspace', action: '–í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω–µ' },
    { keys: 'Ctrl/Cmd + A', action: '–í–∏–±—Ä–∞—Ç–∏ –≤—Å–µ' },
    { keys: 'Ctrl/Cmd + C', action: '–ö–æ–ø—ñ—é–≤–∞—Ç–∏' },
    { keys: 'Ctrl/Cmd + V', action: '–í—Å—Ç–∞–≤–∏—Ç–∏' },
    { keys: 'Ctrl/Cmd + D', action: '–î—É–±–ª—é–≤–∞—Ç–∏' },
    { keys: 'F11', action: '–ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º' },
    { keys: '–ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫', action: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—É–∑–æ–ª' },
    { keys: '–ö–æ–ª–µ—Å–æ –º–∏—à—ñ', action: '–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è' },
    { keys: '–°–µ—Ä–µ–¥–Ω—è –∫–Ω–æ–ø–∫–∞', action: '–ü–∞–Ω–æ—Ä–∞–º—É–≤–∞–Ω–Ω—è' },
    { keys: 'Alt + –õ–ö–ú', action: '–ü–∞–Ω–æ—Ä–∞–º—É–≤–∞–Ω–Ω—è' }
  ];
  
  return (
    <div className="shortcuts-content">
      <table className="shortcuts-table">
        <thead>
          <tr>
            <th>–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è</th>
            <th>–î—ñ—è</th>
          </tr>
        </thead>
        <tbody>
          {shortcuts.map((shortcut, index) => (
            <tr key={index}>
              <td><kbd>{shortcut.keys}</kbd></td>
              <td>{shortcut.action}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

function ExamplesContent({ onExample }) {
  const examples = [
    {
      id: 'simple-flow',
      name: '–ü—Ä–æ—Å—Ç–∏–π –ø–æ—Ç—ñ–∫ –¥–∞–Ω–∏—Ö',
      description: '–¢–∞–π–º–µ—Ä ‚Üí –û–±—Ä–æ–±–∫–∞ ‚Üí –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è',
      icon: 'üìä'
    },
    {
      id: 'automaton',
      name: '–ö–ª—ñ—Ç–∏–Ω–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç',
      description: 'Game of Life –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é',
      icon: 'üéÆ'
    },
    {
      id: 'data-processing',
      name: '–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö',
      description: '–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è',
      icon: '‚öôÔ∏è'
    },
    {
      id: 'interactive',
      name: '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π',
      description: '–†–µ–∞–∫—Ü—ñ—è –Ω–∞ —Ä—É—Ö –º–∏—à—ñ',
      icon: 'üñ±Ô∏è'
    },
    {
      id: 'complex',
      name: '–°–∫–ª–∞–¥–Ω–∏–π –≥—Ä–∞—Ñ',
      description: '–ú–Ω–æ–∂–∏–Ω–Ω—ñ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–∏—Ö',
      icon: 'üï∏Ô∏è'
    }
  ];
  
  return (
    <div className="examples-content">
      <div className="examples-grid">
        {examples.map(example => (
          <button
            key={example.id}
            className="example-card"
            onClick={() => onExample(example.id)}
          >
            <div className="example-icon">{example.icon}</div>
            <div className="example-info">
              <h4>{example.name}</h4>
              <p>{example.description}</p>
            </div>
          </button>
        ))}
      </div>
    </div>
  );
}

function DiagnosticsContent({ diagnostics }) {
  if (!diagnostics) {
    return <div className="diagnostics-loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  }
  
  return (
    <div className="diagnostics-content">
      <section>
        <h4>–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h4>
        <table className="diagnostics-table">
          <tbody>
            <tr>
              <td>ID –≥—Ä–∞—Ñ–∞:</td>
              <td><code>{diagnostics.metadata.id}</code></td>
            </tr>
            <tr>
              <td>–ù–∞–∑–≤–∞:</td>
              <td>{diagnostics.metadata.name}</td>
            </tr>
            <tr>
              <td>–í—É–∑–ª—ñ–≤:</td>
              <td>{diagnostics.nodesCount}</td>
            </tr>
            <tr>
              <td>–ó'—î–¥–Ω–∞–Ω—å:</td>
              <td>{diagnostics.edgesCount}</td>
            </tr>
            <tr>
              <td>–í–∏–±—Ä–∞–Ω–æ:</td>
              <td>{diagnostics.selectedNodes} –≤—É–∑–ª—ñ–≤, {diagnostics.selectedEdges} –∑'—î–¥–Ω–∞–Ω—å</td>
            </tr>
            <tr>
              <td>–Ü—Å—Ç–æ—Ä—ñ—è:</td>
              <td>{diagnostics.historyIndex + 1} / {diagnostics.historySize}</td>
            </tr>
          </tbody>
        </table>
      </section>
      
      {diagnostics.nodes.length > 0 && (
        <section>
          <h4>–ê–∫—Ç–∏–≤–Ω—ñ –≤—É–∑–ª–∏</h4>
          <div className="diagnostics-nodes">
            {diagnostics.nodes.slice(0, 5).map(node => (
              <div key={node.id} className="diagnostic-node">
                <strong>{node.type}</strong> - {node.id.slice(0, 8)}
                {node.hasError && <span className="error-badge">Error</span>}
                <div className="node-metrics">
                  –í–∏–∫–æ–Ω–∞–Ω—å: {node.metadata.executionCount}
                </div>
              </div>
            ))}
          </div>
        </section>
      )}
      
      <section>
        <h4>–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h4>
        <table className="diagnostics-table">
          <tbody>
            <tr>
              <td>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</td>
              <td>{window.canvasAPI?.system?.platform || 'Browser'}</td>
            </tr>
            <tr>
              <td>–í–µ—Ä—Å—ñ—è:</td>
              <td>1.0.0</td>
            </tr>
          </tbody>
        </table>
      </section>
    </div>
  );
}

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
function createExample(graphManager, type) {
  // –û—á–∏—â–µ–Ω–Ω—è –∫–∞–Ω–≤–∏
  graphManager.clear();
  
  switch (type) {
    case 'simple-flow':
      const input1 = graphManager.addNode('input', { x: 100, y: 200 });
      const process1 = graphManager.addNode('process', { x: 300, y: 200 });
      const viz1 = graphManager.addNode('visualizer', { x: 500, y: 200 });
      
      setTimeout(() => {
        graphManager.addEdge(input1.id, process1.id);
        graphManager.addEdge(process1.id, viz1.id);
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—É–∑–ª—ñ–≤
        input1.updateConfig({ inputType: 'timer', interval: 1000 });
        process1.updateCode('return Math.sin(input / 10) * 50 + 50;');
      }, 100);
      break;
      
    case 'automaton':
      const automaton = graphManager.addNode('automaton', { x: 200, y: 150 });
      const viz2 = graphManager.addNode('visualizer', { x: 450, y: 150 });
      
      setTimeout(() => {
        graphManager.addEdge(automaton.id, viz2.id);
        automaton.updateData({ automatonType: 'life', autoRun: true });
      }, 100);
      break;
      
    // –Ü–Ω—à—ñ –ø—Ä–∏–∫–ª–∞–¥–∏...
  }
}